{"ast":null,"code":"class BinarySearchTree {\n  constructor() {\n    // root of a binary seach tree \n    this.root = null;\n  }\n\n  insertAll(storyArray) {\n    storyArray.forEach(story => {\n      this.insert(story);\n    });\n  } // helper method which creates a new node to  \n  // be inserted and calls insertNode \n\n\n  insert(story) {\n    // root is null then node will become root\n    if (this.root === null) this.root = story;else // finds the appropriate position\n      this.insertNode(this.root, story);\n  } // Method to insert a node in a tree  \n\n\n  insertNode(node, newNode) {\n    // if the data is less than the node \n    // data move left of the tree  \n    if (newNode.value < node.value) {\n      // if left is null insert node here \n      if (node.left === null) node.left = newNode;else // if left is not null recurr until  \n        // null is found \n        this.insertNode(node.left, newNode);\n    } // if the data is more than the node \n    // data move right of the tree  \n    else {\n        // if right is null insert node here \n        if (node.right === null) node.right = newNode;else // if right is not null recurr until  \n          // null is found \n          this.insertNode(node.right, newNode);\n      }\n  }\n\n}\n\nexport default BinarySearchTree;","map":{"version":3,"sources":["/mnt/c/Users/avmas/Desktop/dangerzone/client/src/functions/binary.js"],"names":["BinarySearchTree","constructor","root","insertAll","storyArray","forEach","story","insert","insertNode","node","newNode","value","left","right"],"mappings":"AAAA,MAAMA,gBAAN,CACA;AACIC,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,IAAL,GAAY,IAAZ;AACH;;AAEDC,EAAAA,SAAS,CAACC,UAAD,EAAY;AACjBA,IAAAA,UAAU,CAACC,OAAX,CAAmBC,KAAK,IAAI;AACxB,WAAKC,MAAL,CAAYD,KAAZ;AACH,KAFD;AAGH,GAVL,CAYI;AACA;;;AACAC,EAAAA,MAAM,CAACD,KAAD,EACN;AAEI;AACA,QAAG,KAAKJ,IAAL,KAAc,IAAjB,EACI,KAAKA,IAAL,GAAYI,KAAZ,CADJ,KAGI;AACA,WAAKE,UAAL,CAAgB,KAAKN,IAArB,EAA2BI,KAA3B;AACP,GAvBL,CAyBI;;;AACAE,EAAAA,UAAU,CAACC,IAAD,EAAOC,OAAP,EACV;AACI;AACA;AACA,QAAIA,OAAO,CAACC,KAAR,GAAgBF,IAAI,CAACE,KAAzB,EACA;AACI;AACA,UAAIF,IAAI,CAACG,IAAL,KAAc,IAAlB,EACIH,IAAI,CAACG,IAAL,GAAYF,OAAZ,CADJ,KAII;AACA;AACA,aAAKF,UAAL,CAAgBC,IAAI,CAACG,IAArB,EAA2BF,OAA3B;AACP,KAVD,CAYA;AACA;AAbA,SAeA;AACI;AACA,YAAGD,IAAI,CAACI,KAAL,KAAe,IAAlB,EACIJ,IAAI,CAACI,KAAL,GAAaH,OAAb,CADJ,KAII;AACA;AACA,eAAKF,UAAL,CAAgBC,IAAI,CAACI,KAArB,EAA2BH,OAA3B;AACP;AACJ;;AAvDL;;AA2DA,eAAeV,gBAAf","sourcesContent":["class BinarySearchTree \n{ \n    constructor() { \n        // root of a binary seach tree \n        this.root = null; \n    } \n\n    insertAll(storyArray){\n        storyArray.forEach(story => {\n            this.insert(story);\n        })\n    }\n\n    // helper method which creates a new node to  \n    // be inserted and calls insertNode \n    insert(story) \n    {  \n                \n        // root is null then node will become root\n        if(this.root === null) \n            this.root = story; \n        else\n            // finds the appropriate position\n            this.insertNode(this.root, story); \n    } \n  \n    // Method to insert a node in a tree  \n    insertNode(node, newNode) \n    { \n        // if the data is less than the node \n        // data move left of the tree  \n        if (newNode.value < node.value) \n        { \n            // if left is null insert node here \n            if (node.left === null) \n                node.left = newNode; \n            else\n    \n                // if left is not null recurr until  \n                // null is found \n                this.insertNode(node.left, newNode);  \n        } \n    \n        // if the data is more than the node \n        // data move right of the tree  \n        else\n        { \n            // if right is null insert node here \n            if(node.right === null) \n                node.right = newNode; \n            else\n    \n                // if right is not null recurr until  \n                // null is found \n                this.insertNode(node.right,newNode); \n        } \n    } \n  \n} \n\nexport default BinarySearchTree;"]},"metadata":{},"sourceType":"module"}