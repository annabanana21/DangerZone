{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/avmas/Desktop/dangerzone/client/src/components/Complete/Complete.jsx\";\nimport React from 'react';\nimport './Complete.scss';\nimport Health from '../Health/Health';\n\nclass Complete extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      completed: false,\n      died: false,\n      health: this.props.health.health,\n      interval: ''\n    };\n  }\n\n  componentDidMount() {\n    //If user loses any health at all start interval to show health going down\n    if (this.props.story.loss > 0) {\n      this.state.interval = setInterval(() => {\n        this.setState({\n          health: this.state.health - 1\n        });\n      }, 20);\n    } //If health dips below 0 hide home and next button and prepare for losing screen\n\n\n    if (this.props.health.health - this.props.story.loss * 100 <= 0) {\n      this.setState({\n        died: true\n      });\n      setTimeout(() => {\n        this.props.lose(this.props.story.loss * 100, true);\n      }, 6000); //User encounters the last scenario in the story prepare for winning screen\n    } else if (this.props.lastStory) {\n      this.setState({\n        completed: true\n      });\n      setTimeout(() => {\n        this.props.lose(this.props.story.loss * 100, true);\n      }, 6000);\n    }\n  }\n\n  componentDidUpdate() {\n    //Stop showing health decrease when the health meter has shown the complete percent lost\n    if (this.state.interval !== '' && (this.state.health === this.props.health.health - this.props.story.loss * 100 || this.state.health === 0)) {\n      clearInterval(this.state.interval);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"complete\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"complete__prompt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, this.props.story.story), React.createElement(Health, {\n      health: this.state.health,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), !this.state.died && !this.state.completed && React.createElement(\"div\", {\n      className: \"complete__wrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"complete__button\",\n      onClick: () => this.props.lose(this.props.story.loss * 100, true),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Home\"), React.createElement(\"div\", {\n      className: \"complete__button\",\n      onClick: () => this.props.lose(this.props.story.loss * 100, false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Next\")));\n  }\n\n}\n\nexport default Complete;","map":{"version":3,"sources":["/mnt/c/Users/avmas/Desktop/dangerzone/client/src/components/Complete/Complete.jsx"],"names":["React","Health","Complete","Component","state","completed","died","health","props","interval","componentDidMount","story","loss","setInterval","setState","setTimeout","lose","lastStory","componentDidUpdate","clearInterval","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Complete.scss';\nimport Health from '../Health/Health';\n\nclass Complete extends React.Component {\n\n    state = {\n        completed: false,\n        died: false,\n        health: this.props.health.health,\n        interval: ''\n    }\n\n    componentDidMount() {\n        //If user loses any health at all start interval to show health going down\n        if (this.props.story.loss > 0) {\n            this.state.interval = setInterval(() => {\n                this.setState({\n                    health: this.state.health - 1\n                })\n            }, 20)\n        }\n\n        //If health dips below 0 hide home and next button and prepare for losing screen\n        if (this.props.health.health - this.props.story.loss*100 <= 0) {\n            this.setState({\n                died: true\n            })\n            setTimeout(() => {\n                this.props.lose(this.props.story.loss*100, true);\n            }, 6000)\n        //User encounters the last scenario in the story prepare for winning screen\n        } else if (this.props.lastStory) {\n            this.setState({\n                completed: true\n            })\n            setTimeout(() => {\n                this.props.lose(this.props.story.loss*100, true);\n            }, 6000)\n        }\n    }\n\n    componentDidUpdate() {\n        //Stop showing health decrease when the health meter has shown the complete percent lost\n        if (this.state.interval !== '' && (this.state.health === this.props.health.health - this.props.story.loss*100 || this.state.health === 0)) {\n            clearInterval(this.state.interval)\n        }\n    }\n\n    render() {\n        return (\n            <div className='complete'>\n                <div className='complete__prompt'>{this.props.story.story}</div>\n                <Health health={this.state.health}/>\n                {!this.state.died && !this.state.completed && <div className='complete__wrap'>\n                    <div className='complete__button' onClick={() => this.props.lose(this.props.story.loss*100, true)}>Home</div>\n                    <div className='complete__button' onClick={() => this.props.lose(this.props.story.loss*100, false)}>Next</div>\n                </div>}\n            </div>\n        )\n    }\n}\n\nexport default Complete;"]},"metadata":{},"sourceType":"module"}