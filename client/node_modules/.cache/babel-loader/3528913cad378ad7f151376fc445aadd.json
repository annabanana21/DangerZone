{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/avmas/Desktop/dangerzone/client/src/controller/GameController.jsx\";\nimport React from 'react';\nimport Main from '../pages/main';\nimport axios from 'axios';\nimport Display from '../pages/display';\nimport BinarySearchTree from '../functions/binary';\nimport iconPicker from '../functions/iconPicker';\nimport Loading from '../pages/loading';\nimport EndScreen from '../components/EndScreen/EndScreen';\n\nclass GameController extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isHome: false,\n      isPlaying: false,\n      load: true,\n      ended: false,\n      lastStory: false,\n      story: [],\n      storyLeft: [],\n      userStats: {\n        health: 100,\n        lost: false\n      },\n      weather: [],\n      population: [1000000, 250000]\n    };\n    this.apiKey = '4774ad80334f760f9b45af484c39e9fe';\n    this.getCoordinates = this.getCoordinates.bind(this);\n    this.getLocation = this.getLocation.bind(this);\n  }\n\n  formatData(arr) {\n    return arr.map(object => {\n      let newTree = new BinarySearchTree();\n      newTree.insertAll(object.scenario);\n      return {\n        intro: object.intro,\n        title: object.title,\n        background: object.background,\n        audio: object.sound,\n        category: object.category,\n        tree: newTree\n      };\n    });\n  }\n\n  getCoordinates(position) {\n    const long = position.coords.longitude;\n    const lat = position.coords.latitude;\n    axios.get('http://api.openweathermap.org/data/2.5/weather?lat=' + lat + '&lon=' + long + '&appid=' + this.apiKey).then(results => {\n      this.setState({\n        weather: iconPicker(results.data)\n      });\n      this.getStoryLine();\n    });\n  }\n\n  getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.getCoordinates);\n    }\n  }\n\n  getStoryLine() {\n    axios.get('http://localhost:8080/story/' + this.state.weather[2]).then(res => {\n      let storyLine = this.formatData(res.data);\n      this.setState({\n        story: storyLine,\n        storyLeft: [...storyLine]\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.getLocation();\n  }\n\n  change() {\n    this.setState({\n      isHome: !this.state.isHome,\n      isPlaying: !this.state.isPlaying\n    });\n  }\n\n  lose(healthLoss, home) {\n    let goHome = home;\n    let newHealth = this.state.userStats.health - healthLoss;\n    let theyLost = false;\n    let ended = false;\n    let isPlaying = !home;\n\n    if (newHealth <= 0) {\n      theyLost = true;\n      newHealth = 0;\n      ended = true;\n      isPlaying = false;\n      goHome = false;\n    }\n\n    if (this.state.lastStory && newHealth > 0) {\n      this.setState({\n        isHome: false,\n        ended: true,\n        isPlaying: false,\n        userStats: {\n          health: newHealth,\n          lost: false\n        }\n      });\n    } else {\n      let lastStory = false;\n      let newArr = this.state.storyLeft.slice(1);\n\n      if (newArr[0] === this.state.story[this.state.story.length - 1]) {\n        lastStory = true;\n      }\n\n      this.setState({\n        isHome: goHome,\n        ended: ended,\n        storyLeft: newArr,\n        isPlaying: isPlaying,\n        lastStory,\n        userStats: {\n          health: newHealth,\n          lost: theyLost\n        }\n      });\n    }\n  }\n\n  startGame() {\n    this.setState({\n      load: false,\n      isHome: true\n    });\n  }\n\n  render() {\n    if (this.state.ended) {\n      return React.createElement(Main, {\n        population: this.state.population,\n        health: this.state.userStats,\n        weather: this.state.weather,\n        story: this.state.story,\n        storyLeft: this.state.storyLeft,\n        change: () => this.change(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      });\n    } else if (this.state.isPlaying) {\n      return React.createElement(Display, {\n        lastStory: this.state.lastStory,\n        health: this.state.userStats,\n        story: this.state.storyLeft[0],\n        change: () => this.change(),\n        lose: (i, x) => this.lose(i, x),\n        nextStory: () => this.nextStory(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      });\n    } else if (this.state.isHome) {\n      return React.createElement(EndScreen, {\n        lost: this.state.userStats.lost,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(Loading, {\n        startGame: () => this.startGame(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default GameController;","map":{"version":3,"sources":["/mnt/c/Users/avmas/Desktop/dangerzone/client/src/controller/GameController.jsx"],"names":["React","Main","axios","Display","BinarySearchTree","iconPicker","Loading","EndScreen","GameController","Component","constructor","props","state","isHome","isPlaying","load","ended","lastStory","story","storyLeft","userStats","health","lost","weather","population","apiKey","getCoordinates","bind","getLocation","formatData","arr","map","object","newTree","insertAll","scenario","intro","title","background","audio","sound","category","tree","position","long","coords","longitude","lat","latitude","get","then","results","setState","data","getStoryLine","navigator","geolocation","getCurrentPosition","res","storyLine","componentDidMount","change","lose","healthLoss","home","goHome","newHealth","theyLost","newArr","slice","length","startGame","render","i","x","nextStory"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Main from '../pages/main';\nimport axios from 'axios';\nimport Display from '../pages/display';\nimport BinarySearchTree from '../functions/binary';\nimport iconPicker from '../functions/iconPicker';\nimport Loading from '../pages/loading';\nimport EndScreen from '../components/EndScreen/EndScreen';\n\nclass GameController extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isHome: false,\n            isPlaying: false,\n            load: true,\n            ended: false,\n            lastStory: false,\n            story: [],\n            storyLeft: [],\n            userStats: {\n                health: 100,\n                lost: false\n            },\n            weather: [],\n            population: [1000000, 250000]\n        }\n        this.apiKey = '4774ad80334f760f9b45af484c39e9fe';\n        this.getCoordinates = this.getCoordinates.bind(this);\n        this.getLocation = this.getLocation.bind(this);\n    }\n\n\n    formatData(arr) {\n        return arr.map(object => {\n            let newTree = new BinarySearchTree()\n            newTree.insertAll(object.scenario)\n            return {\n                intro: object.intro,\n                title: object.title,\n                background: object.background,\n                audio: object.sound,\n                category: object.category,\n                tree: newTree\n            }\n        })\n    }\n\n    getCoordinates(position) {\n        const long = position.coords.longitude;\n        const lat = position.coords.latitude;\n        axios.get('http://api.openweathermap.org/data/2.5/weather?lat='+lat+'&lon='+long+'&appid='+this.apiKey).then(results => {\n          this.setState({\n              weather: iconPicker(results.data)\n          })\n          this.getStoryLine()\n        })\n    }\n\n    getLocation() {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this.getCoordinates);\n        }\n    }\n\n    getStoryLine() {\n        axios.get('http://localhost:8080/story/'+this.state.weather[2]).then(res => {\n            let storyLine = this.formatData(res.data)\n            this.setState({\n                story: storyLine,\n                storyLeft: [... storyLine]\n            })\n        })\n    }\n\n    componentDidMount() {\n        this.getLocation();\n    }\n\n    change() {\n        this.setState({\n            isHome: !this.state.isHome,\n            isPlaying: !this.state.isPlaying\n        })\n    }\n\n    lose(healthLoss, home) {\n\n        let goHome = home;\n        let newHealth = this.state.userStats.health - healthLoss\n        let theyLost = false;\n        let ended = false;\n        let isPlaying = !home;\n        if (newHealth <= 0) {\n            theyLost = true;\n            newHealth = 0;\n            ended = true;\n            isPlaying = false\n            goHome = false\n        }\n        if (this.state.lastStory && newHealth > 0) {\n            this.setState({\n                isHome: false,\n                ended: true,\n                isPlaying: false,\n                userStats: {\n                    health: newHealth,\n                    lost: false\n                }\n            })\n        } else {\n           let lastStory = false;\n            let newArr = this.state.storyLeft.slice(1);\n            if (newArr[0] === this.state.story[this.state.story.length-1]) {\n                lastStory = true\n            }\n            this.setState({\n                isHome: goHome,\n                ended: ended,\n                storyLeft: newArr,\n                isPlaying: isPlaying,\n                lastStory,\n                userStats: {\n                    health: newHealth,\n                    lost: theyLost\n                }\n            }) \n        }\n    }\n\n    startGame() {\n        this.setState({\n            load: false,\n            isHome: true\n        })\n    }\n\n    render() {\n        if (this.state.ended) {\n            return (\n                <Main population={this.state.population} health={this.state.userStats} weather={this.state.weather} story={this.state.story} storyLeft={this.state.storyLeft} change={() => this.change()}/>\n            )\n        } else if (this.state.isPlaying) {\n            return <Display lastStory={this.state.lastStory} health={this.state.userStats} story={this.state.storyLeft[0]} change={() => this.change()} lose={(i,x) => this.lose(i,x)} nextStory={() => this.nextStory()}/>;\n        } else if (this.state.isHome) {\n            return <EndScreen lost={this.state.userStats.lost}/>\n        }\n        else {\n            return <Loading startGame={() => this.startGame()}/>\n        }\n    }\n}\n\nexport default GameController;"]},"metadata":{},"sourceType":"module"}