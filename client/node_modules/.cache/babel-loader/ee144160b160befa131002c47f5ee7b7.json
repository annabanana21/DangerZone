{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/avmas/Desktop/dangerzone/client/src/controller/GameController.jsx\";\nimport React from 'react';\nimport Main from '../pages/main';\nimport axios from 'axios';\nimport Display from '../pages/display';\nimport BinarySearchTree from '../functions/binary';\nimport iconPicker from '../functions/iconPicker';\nimport Loading from '../pages/loading';\n\nclass GameController extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isHome: false,\n      isPlaying: false,\n      load: true,\n      story: [],\n      storyLeft: [],\n      userStats: {\n        health: 100,\n        lost: false\n      },\n      weather: []\n    };\n    this.apiKey = '4774ad80334f760f9b45af484c39e9fe';\n    this.getCoordinates = this.getCoordinates.bind(this);\n    this.getLocation = this.getLocation.bind(this);\n  }\n\n  formatData(arr) {\n    return arr.map(object => {\n      let newTree = new BinarySearchTree();\n      newTree.insertAll(object.scenario);\n      return {\n        intro: object.intro,\n        title: object.title,\n        background: object.background,\n        audio: object.sound,\n        category: object.category,\n        tree: newTree\n      };\n    });\n  }\n\n  getCoordinates(position) {\n    const long = position.coords.longitude;\n    const lat = position.coords.latitude;\n    axios.get('http://api.openweathermap.org/data/2.5/weather?lat=' + lat + '&lon=' + long + '&appid=' + this.apiKey).then(results => {\n      this.setState({\n        weather: iconPicker(results.data)\n      });\n      this.getStoryLine();\n    });\n  }\n\n  getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.getCoordinates);\n    }\n  }\n\n  getStoryLine() {\n    axios.get('http://localhost:8080/story/' + this.state.weather[2]).then(res => {\n      let storyLine = this.formatData(res.data);\n      this.setState({\n        story: storyLine,\n        storyLeft: [...storyLine]\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.getLocation();\n  }\n\n  change() {\n    this.setState({\n      isHome: !this.state.isHome,\n      isPlaying: !this.state.isPlaying\n    });\n  }\n\n  lose(healthLoss, home) {\n    let theyLost = false;\n\n    if (this.state.userStats.health - healthLoss <= 0) {\n      theyLost = true;\n    }\n\n    let newArr = this.state.storyLeft.slice(1);\n    this.setState({\n      isHome: home,\n      storyLeft: newArr,\n      isPlaying: !home,\n      userStats: {\n        health: this.state.userStats.health - healthLoss,\n        lost: theyLost\n      }\n    });\n  }\n\n  startGame() {\n    this.setState({\n      load: false,\n      isHome: true\n    });\n  }\n\n  render() {\n    console.log('play', this.state.isPlaying, 'home', this.state.isHome);\n\n    if (this.state.isHome) {\n      return React.createElement(Main, {\n        health: this.state.userStats,\n        weather: this.state.weather,\n        story: this.state.story,\n        storyLeft: this.state.storyLeft,\n        change: () => this.change(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      });\n    } else if (this.state.isPlaying) {\n      return React.createElement(Display, {\n        story: this.state.storyLeft[0],\n        change: () => this.change(),\n        lose: i => this.lose(i),\n        nextStory: () => this.nextStory(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(Loading, {\n        startGame: () => this.startGame(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default GameController;","map":{"version":3,"sources":["/mnt/c/Users/avmas/Desktop/dangerzone/client/src/controller/GameController.jsx"],"names":["React","Main","axios","Display","BinarySearchTree","iconPicker","Loading","GameController","Component","constructor","props","state","isHome","isPlaying","load","story","storyLeft","userStats","health","lost","weather","apiKey","getCoordinates","bind","getLocation","formatData","arr","map","object","newTree","insertAll","scenario","intro","title","background","audio","sound","category","tree","position","long","coords","longitude","lat","latitude","get","then","results","setState","data","getStoryLine","navigator","geolocation","getCurrentPosition","res","storyLine","componentDidMount","change","lose","healthLoss","home","theyLost","newArr","slice","startGame","render","console","log","i","nextStory"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Main from '../pages/main';\nimport axios from 'axios';\nimport Display from '../pages/display';\nimport BinarySearchTree from '../functions/binary';\nimport iconPicker from '../functions/iconPicker';\nimport Loading from '../pages/loading';\n\nclass GameController extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isHome: false,\n            isPlaying: false,\n            load: true,\n            story: [],\n            storyLeft: [],\n            userStats: {\n                health: 100,\n                lost: false\n            },\n            weather: []\n        }\n        this.apiKey = '4774ad80334f760f9b45af484c39e9fe';\n        this.getCoordinates = this.getCoordinates.bind(this);\n        this.getLocation = this.getLocation.bind(this);\n    }\n\n\n    formatData(arr) {\n        return arr.map(object => {\n            let newTree = new BinarySearchTree()\n            newTree.insertAll(object.scenario)\n            return {\n                intro: object.intro,\n                title: object.title,\n                background: object.background,\n                audio: object.sound,\n                category: object.category,\n                tree: newTree\n            }\n        })\n    }\n\n    getCoordinates(position) {\n        const long = position.coords.longitude;\n        const lat = position.coords.latitude;\n        axios.get('http://api.openweathermap.org/data/2.5/weather?lat='+lat+'&lon='+long+'&appid='+this.apiKey).then(results => {\n          this.setState({\n              weather: iconPicker(results.data)\n          })\n          this.getStoryLine()\n        })\n    }\n\n    getLocation() {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this.getCoordinates);\n        }\n    }\n\n    getStoryLine() {\n        axios.get('http://localhost:8080/story/'+this.state.weather[2]).then(res => {\n            let storyLine = this.formatData(res.data)\n            this.setState({\n                story: storyLine,\n                storyLeft: [... storyLine]\n            })\n        })\n    }\n\n    componentDidMount() {\n        this.getLocation();\n    }\n\n    change() {\n        this.setState({\n            isHome: !this.state.isHome,\n            isPlaying: !this.state.isPlaying\n        })\n    }\n\n    lose(healthLoss, home) {\n        let theyLost = false;\n        if (this.state.userStats.health - healthLoss <= 0) {\n            theyLost = true\n        }\n        let newArr = this.state.storyLeft.slice(1);\n        this.setState({\n            isHome: home,\n            storyLeft: newArr,\n            isPlaying: !home,\n            userStats: {\n                health: this.state.userStats.health - healthLoss,\n                lost: theyLost\n            }\n        })\n    }\n\n    startGame() {\n        this.setState({\n            load: false,\n            isHome: true\n        })\n    }\n\n    render() {\n        console.log('play', this.state.isPlaying, 'home', this.state.isHome);\n        if (this.state.isHome) {\n            return (\n                <Main health={this.state.userStats} weather={this.state.weather} story={this.state.story} storyLeft={this.state.storyLeft} change={() => this.change()}/>\n            )\n        } else if (this.state.isPlaying) {\n            return <Display story={this.state.storyLeft[0]} change={() => this.change()} lose={(i) => this.lose(i)} nextStory={() => this.nextStory()}/>;\n        } else {\n            return <Loading startGame={() => this.startGame()}/>\n        }\n    }\n}\n\nexport default GameController;"]},"metadata":{},"sourceType":"module"}