{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/avmas/Desktop/dangerzone/client/src/controller/GameController.jsx\";\nimport React from 'react';\nimport Main from '../pages/main';\nimport axios from 'axios';\nimport Display from '../pages/display';\nimport BinarySearchTree from '../functions/binary';\nimport iconPicker from '../functions/iconPicker';\n\nclass GameController extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isHome: true,\n      isPlaying: false,\n      story: [],\n      storyLeft: [],\n      userStats: {\n        health: 100,\n        lost: false\n      },\n      weather: []\n    };\n    this.apiKey = '4774ad80334f760f9b45af484c39e9fe';\n    this.getCoordinates = this.getCoordinates.bind(this);\n    this.getLocation = this.getLocation.bind(this);\n  }\n\n  formatData(arr) {\n    return arr.map(object => {\n      let newTree = new BinarySearchTree();\n      newTree.insertAll(object.scenario);\n      return {\n        intro: object.intro,\n        title: object.title,\n        background: object.background,\n        audio: object.sound,\n        category: object.category,\n        tree: newTree\n      };\n    });\n  }\n\n  getCoordinates(position) {\n    const long = position.coords.longitude;\n    const lat = position.coords.latitude;\n    console.log(lat, long);\n    axios.get('http://api.openweathermap.org/data/2.5/weather?lat=' + lat + '&lon=' + long + '&appid=' + this.apiKey).then(results => {\n      this.setState({\n        weather: iconPicker(results.data)\n      });\n      this.getStoryLine();\n    });\n  }\n\n  getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.getCoordinates);\n    }\n  }\n\n  getStoryLine() {\n    axios.get('http://localhost:8080/story/' + this.state.weather[2]).then(res => {\n      let storyLine = this.formatData(res.data);\n      this.setState({\n        story: storyLine,\n        storyLeft: storyLine\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.getLocation();\n  }\n\n  change() {\n    this.setState({\n      isHome: !this.state.isHome,\n      isPlaying: !this.state.isPlaying\n    });\n  }\n\n  lose(healthLoss) {\n    if (this.state.userStats.health - healthLoss <= 0) {\n      this.setState({\n        userStats: {\n          health: this.state.userStats.health - healthLoss,\n          lost: true\n        }\n      });\n    } else {\n      this.setState({\n        userStats: {\n          health: this.state.userStats.health - healthLoss,\n          lost: false\n        }\n      });\n    }\n  }\n\n  nextStory() {\n    this.setState({\n      storyLeft: this.state.storyLeft.splice(1, 1)\n    });\n  }\n\n  render() {\n    console.log(this.state.storyLeft);\n\n    if (this.state.isHome) {\n      return React.createElement(Main, {\n        health: this.state.userStats,\n        weather: this.state.weather,\n        story: this.state.story,\n        storyLeft: this.state.storyLeft,\n        change: () => this.change(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      });\n    } else if (this.state.isPlaying) {\n      return React.createElement(Display, {\n        story: this.state.storyLeft[0],\n        change: () => this.change(),\n        lose: i => this.lose(i),\n        nextStory: () => this.nextStory(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default GameController;","map":{"version":3,"sources":["/mnt/c/Users/avmas/Desktop/dangerzone/client/src/controller/GameController.jsx"],"names":["React","Main","axios","Display","BinarySearchTree","iconPicker","GameController","Component","constructor","props","state","isHome","isPlaying","story","storyLeft","userStats","health","lost","weather","apiKey","getCoordinates","bind","getLocation","formatData","arr","map","object","newTree","insertAll","scenario","intro","title","background","audio","sound","category","tree","position","long","coords","longitude","lat","latitude","console","log","get","then","results","setState","data","getStoryLine","navigator","geolocation","getCurrentPosition","res","storyLine","componentDidMount","change","lose","healthLoss","nextStory","splice","render","i"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Main from '../pages/main';\nimport axios from 'axios';\nimport Display from '../pages/display';\nimport BinarySearchTree from '../functions/binary';\nimport iconPicker from '../functions/iconPicker';\n\nclass GameController extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isHome: true,\n            isPlaying: false,\n            story: [],\n            storyLeft: [],\n            userStats: {\n                health: 100,\n                lost: false\n            },\n            weather: []\n        }\n        this.apiKey = '4774ad80334f760f9b45af484c39e9fe';\n        this.getCoordinates = this.getCoordinates.bind(this);\n        this.getLocation = this.getLocation.bind(this);\n    }\n\n\n    formatData(arr) {\n        return arr.map(object => {\n            let newTree = new BinarySearchTree()\n            newTree.insertAll(object.scenario)\n            return {\n                intro: object.intro,\n                title: object.title,\n                background: object.background,\n                audio: object.sound,\n                category: object.category,\n                tree: newTree\n            }\n        })\n    }\n\n    getCoordinates(position) {\n        const long = position.coords.longitude;\n        const lat = position.coords.latitude;\n        console.log(lat, long);\n        axios.get('http://api.openweathermap.org/data/2.5/weather?lat='+lat+'&lon='+long+'&appid='+this.apiKey).then(results => {\n          this.setState({\n              weather: iconPicker(results.data)\n          })\n          this.getStoryLine()\n        })\n    }\n\n    getLocation() {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this.getCoordinates);\n        }\n    }\n\n    getStoryLine() {\n        axios.get('http://localhost:8080/story/'+this.state.weather[2]).then(res => {\n            let storyLine = this.formatData(res.data)\n            this.setState({\n                story: storyLine,\n                storyLeft: storyLine\n            })\n        })\n    }\n\n    componentDidMount() {\n        this.getLocation();\n    }\n\n    change() {\n        this.setState({\n            isHome: !this.state.isHome,\n            isPlaying: !this.state.isPlaying\n        })\n    }\n\n    lose(healthLoss) {\n        if (this.state.userStats.health - healthLoss <= 0) {\n            this.setState({\n                userStats: {\n                    health: this.state.userStats.health - healthLoss,\n                    lost: true\n                }\n            })\n        } else {\n            this.setState({\n                userStats: {\n                    health: this.state.userStats.health - healthLoss,\n                    lost: false\n                }\n            })\n        }\n    }\n\n    nextStory() {\n        this.setState({\n            storyLeft: this.state.storyLeft.splice(1, 1)\n        })\n    }\n\n    render() {\n        console.log(this.state.storyLeft)\n        if (this.state.isHome) {\n            return (\n                <Main health={this.state.userStats} weather={this.state.weather} story={this.state.story} storyLeft={this.state.storyLeft} change={() => this.change()}/>\n            )\n        } else if (this.state.isPlaying) {\n            return <Display story={this.state.storyLeft[0]} change={() => this.change()} lose={(i) => this.lose(i)} nextStory={() => this.nextStory()}/>;\n        }\n    }\n}\n\nexport default GameController;"]},"metadata":{},"sourceType":"module"}