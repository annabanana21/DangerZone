{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/avmas/Desktop/dangerzone/client/src/components/EndScreen/EndScreen.jsx\";\nimport React from 'react';\nimport './EndScreen.scss';\nimport lose from '../../assets/lose.png';\nimport win from '../../assets/win.png';\nimport earthquake from \"../../assets/Icons/Earthquake.svg\";\nimport freeze from \"../../assets/Icons/ColdWave.svg\";\nimport tornado from \"../../assets/Icons/Hurricane.svg\";\n\nclass EndScreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.showGames = () => {\n      let display = [];\n      let newList = this.games.filter(obj => obj.type[0] !== this.props.weather[2]);\n      newList.forEach(game => {\n        display.push(React.createElement(\"img\", {\n          src: game.type[1],\n          className: \"end__icon\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }));\n      });\n      return display;\n    };\n\n    this.state = {\n      health: 0,\n      interval: ''\n    };\n    this.games = [{\n      type: ['earth', earthquake]\n    }, {\n      type: ['freeze', freeze]\n    }, {\n      type: ['wind', tornado]\n    }];\n  }\n\n  componentDidMount() {\n    //If the user hasn't lost start counter to show user's end of game health\n    if (!this.props.stats.lost) {\n      this.setState({\n        interval: setInterval(() => {\n          this.setState({\n            health: this.state.health + 1\n          });\n        }, 20)\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    //Clear the health interval when the user's total health is displayed\n    if (this.props.stats.health === this.state.health) {\n      clearInterval(this.state.interval);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"end\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, this.props.stats.lost && React.createElement(React.Fragment, null, React.createElement(\"img\", {\n      src: lose,\n      className: \"end__image\",\n      alt: \"Skull with missing front teeth\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      className: \"end__title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"YOU LOSE\")), !this.props.stats.lost && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"end__icon-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"TRY THE OTHER GAMES!\"), this.showGames()), React.createElement(\"img\", {\n      src: win,\n      className: \"end__image\",\n      alt: \"Skull with old school pilot hat on\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      className: \"end__title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"YOU WIN\"), React.createElement(\"h3\", {\n      className: \"end__percent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, this.state.health, \"% HEALTH REMAINING\")), React.createElement(\"div\", {\n      className: \"end__button\",\n      onClick: this.props.refresh,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"PLAY AGAIN\"));\n  }\n\n}\n\nexport default EndScreen;","map":{"version":3,"sources":["/mnt/c/Users/avmas/Desktop/dangerzone/client/src/components/EndScreen/EndScreen.jsx"],"names":["React","lose","win","EndScreen","Component","constructor","props","showGames","display","newList","games","filter","obj","type","weather","forEach","game","push","state","health","interval","earthquake","freeze","tornado","componentDidMount","stats","lost","setState","setInterval","componentDidUpdate","clearInterval","render","refresh"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './EndScreen.scss';\nimport lose from '../../assets/lose.png';\nimport win from '../../assets/win.png';\nimport earthquake from '../../assets/Icons/Earthquake.svg';\nimport freeze from '../../assets/Icons/ColdWave.svg';\nimport tornado from '../../assets/Icons/Hurricane.svg';\n\nclass EndScreen extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            health: 0,\n            interval: ''\n        }\n        this.games = [{type: ['earth', earthquake]}, {type: ['freeze', freeze]}, {type: ['wind', tornado]}]\n    }\n\n    componentDidMount() {\n        //If the user hasn't lost start counter to show user's end of game health\n        if (!this.props.stats.lost) {\n            this.setState({\n                interval: setInterval(() => {\n                    this.setState({\n                        health: this.state.health + 1\n                    })\n                }, 20)\n            })\n        }\n    }\n\n    componentDidUpdate() {\n        //Clear the health interval when the user's total health is displayed\n        if (this.props.stats.health === this.state.health) {\n            clearInterval(this.state.interval)\n        }\n    }\n\n    showGames = () => {\n        let display = [];\n        let newList = this.games.filter(obj => obj.type[0] !== this.props.weather[2])\n        newList.forEach(game => {\n            display.push(<img src={game.type[1]} className='end__icon'/>)\n        })\n        return display;\n    }\n\n    render() {\n        return (\n            <div className='end'>\n                {\n                    this.props.stats.lost && (\n                        <>\n                            <img src={lose} className='end__image' alt='Skull with missing front teeth'/>\n                            <h2 className='end__title'>YOU LOSE</h2>\n                        </>\n                        )\n                }\n                {\n                    !this.props.stats.lost && (\n                        <>\n                        <div className='end__icon-box'>\n                        <h3>TRY THE OTHER GAMES!</h3>\n                        {\n                            this.showGames()\n                        }\n                        </div>\n                        <img src={win} className='end__image' alt='Skull with old school pilot hat on'/>\n                        <h2 className='end__title'>YOU WIN</h2>\n                        <h3 className='end__percent'>{this.state.health}% HEALTH REMAINING</h3>\n                        </>\n                        )\n                }\n                <div className='end__button' onClick={this.props.refresh}>PLAY AGAIN</div>\n            </div>\n        )\n    }\n}\n\nexport default EndScreen;"]},"metadata":{},"sourceType":"module"}