{"ast":null,"code":"import _classCallCheck from\"/mnt/c/Users/avmas/Desktop/dangerzone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/mnt/c/Users/avmas/Desktop/dangerzone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";var BinarySearchTree=/*#__PURE__*/function(){function BinarySearchTree(){_classCallCheck(this,BinarySearchTree);// root of a binary seach tree \nthis.root=null;}_createClass(BinarySearchTree,[{key:\"insertAll\",value:function insertAll(storyArray){var _this=this;storyArray.forEach(function(story){_this.insert(story);});}// helper method which creates a new node to  \n// be inserted and calls insertNode \n},{key:\"insert\",value:function insert(story){// root is null then node will become root\nif(this.root===null)this.root=story;else// finds the appropriate position\nthis.insertNode(this.root,story);}// Method to insert a node in a tree  \n},{key:\"insertNode\",value:function insertNode(node,newNode){// if the data is less than the node \n// data move left of the tree  \nif(newNode.value<node.value){// if left is null insert node here \nif(node.left===null)node.left=newNode;else// if left is not null recurr until  \n// null is found \nthis.insertNode(node.left,newNode);}// if the data is more than the node \n// data move right of the tree  \nelse{// if right is null insert node here \nif(node.right===null)node.right=newNode;else// if right is not null recurr until  \n// null is found \nthis.insertNode(node.right,newNode);}}}]);return BinarySearchTree;}();export default BinarySearchTree;","map":{"version":3,"sources":["/mnt/c/Users/avmas/Desktop/dangerzone/client/src/functions/binary.js"],"names":["BinarySearchTree","root","storyArray","forEach","story","insert","insertNode","node","newNode","value","left","right"],"mappings":"uUAAMA,CAAAA,gB,yBAEF,2BAAc,wCACV;AACA,KAAKC,IAAL,CAAY,IAAZ,CACH,C,yEAESC,U,CAAW,gBACjBA,UAAU,CAACC,OAAX,CAAmB,SAAAC,KAAK,CAAI,CACxB,KAAI,CAACC,MAAL,CAAYD,KAAZ,EACH,CAFD,EAGH,CAED;AACA;sCACOA,K,CACP,CAEI;AACA,GAAG,KAAKH,IAAL,GAAc,IAAjB,CACI,KAAKA,IAAL,CAAYG,KAAZ,CADJ,IAGI;AACA,KAAKE,UAAL,CAAgB,KAAKL,IAArB,CAA2BG,KAA3B,EACP,CAED;8CACWG,I,CAAMC,O,CACjB,CACI;AACA;AACA,GAAIA,OAAO,CAACC,KAAR,CAAgBF,IAAI,CAACE,KAAzB,CACA,CACI;AACA,GAAIF,IAAI,CAACG,IAAL,GAAc,IAAlB,CACIH,IAAI,CAACG,IAAL,CAAYF,OAAZ,CADJ,IAII;AACA;AACA,KAAKF,UAAL,CAAgBC,IAAI,CAACG,IAArB,CAA2BF,OAA3B,EACP,CAED;AACA;AAbA,IAeA,CACI;AACA,GAAGD,IAAI,CAACI,KAAL,GAAe,IAAlB,CACIJ,IAAI,CAACI,KAAL,CAAaH,OAAb,CADJ,IAII;AACA;AACA,KAAKF,UAAL,CAAgBC,IAAI,CAACI,KAArB,CAA2BH,OAA3B,EACP,CACJ,C,gCAIL,cAAeR,CAAAA,gBAAf","sourcesContent":["class BinarySearchTree \n{ \n    constructor() { \n        // root of a binary seach tree \n        this.root = null; \n    } \n\n    insertAll(storyArray){\n        storyArray.forEach(story => {\n            this.insert(story);\n        })\n    }\n\n    // helper method which creates a new node to  \n    // be inserted and calls insertNode \n    insert(story) \n    {  \n                \n        // root is null then node will become root\n        if(this.root === null) \n            this.root = story; \n        else\n            // finds the appropriate position\n            this.insertNode(this.root, story); \n    } \n  \n    // Method to insert a node in a tree  \n    insertNode(node, newNode) \n    { \n        // if the data is less than the node \n        // data move left of the tree  \n        if (newNode.value < node.value) \n        { \n            // if left is null insert node here \n            if (node.left === null) \n                node.left = newNode; \n            else\n    \n                // if left is not null recurr until  \n                // null is found \n                this.insertNode(node.left, newNode);  \n        } \n    \n        // if the data is more than the node \n        // data move right of the tree  \n        else\n        { \n            // if right is null insert node here \n            if(node.right === null) \n                node.right = newNode; \n            else\n    \n                // if right is not null recurr until  \n                // null is found \n                this.insertNode(node.right,newNode); \n        } \n    } \n  \n} \n\nexport default BinarySearchTree;"]},"metadata":{},"sourceType":"module"}