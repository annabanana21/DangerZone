{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/avmas/Desktop/dangerzone/client/src/controller/GameController.jsx\";\nimport React from 'react';\nimport Main from '../pages/main';\nimport axios from 'axios';\nimport Display from '../pages/display';\nimport BinarySearchTree from '../functions/binary';\nimport iconPicker from '../functions/iconPicker';\nimport Loading from '../pages/loading';\nimport EndScreen from '../components/EndScreen/EndScreen';\n\nclass GameController extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getCoordinates = (position, keyWord) => {\n      const long = position.coords.longitude;\n      const lat = position.coords.latitude;\n      axios.get('http://api.openweathermap.org/data/2.5/weather?lat=' + lat + '&lon=' + long + '&appid=' + this.apiKey).then(results => {\n        this.setState({\n          weather: iconPicker(results.data, keyWord)\n        });\n        this.getStoryLine(this.state.weather[2]);\n      });\n    };\n\n    this.getLocation = keyWord => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(() => this.getCoordinates(keyWord));\n      }\n    };\n\n    this.state = {\n      isHome: false,\n      isPlaying: false,\n      load: true,\n      ended: false,\n      lastStory: false,\n      story: [],\n      storyLeft: [],\n      userStats: {\n        health: 100,\n        lost: false\n      },\n      weather: [],\n      population: Math.floor(Math.random() * 2000000) + 250000\n    };\n    this.apiKey = '4774ad80334f760f9b45af484c39e9fe';\n  }\n\n  refresh(keyWord) {\n    console.log(keyWord);\n\n    if (!keyWord) {\n      this.getLocation();\n    } else {}\n\n    this.setState({\n      isHome: true,\n      isPlaying: false,\n      ended: false,\n      lastStory: false,\n      userStats: {\n        health: 100,\n        lost: true\n      }\n    });\n  }\n\n  popSetter(newPopulation) {\n    this.setState({\n      population: newPopulation\n    });\n  }\n\n  formatData(arr) {\n    return arr.map(object => {\n      let newTree = new BinarySearchTree();\n      newTree.insertAll(object.scenario);\n      return {\n        intro: object.intro,\n        title: object.title,\n        background: object.background,\n        audio: object.sound,\n        category: object.category,\n        tree: newTree\n      };\n    });\n  }\n\n  getStoryLine(category) {\n    axios.get('http://localhost:8080/story/' + category).then(res => {\n      let storyLine = this.formatData(res.data);\n      this.setState({\n        story: storyLine,\n        storyLeft: [...storyLine]\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.getLocation();\n  }\n\n  change() {\n    this.setState({\n      isHome: !this.state.isHome,\n      isPlaying: !this.state.isPlaying\n    });\n  }\n\n  lose(healthLoss, home) {\n    let goHome = home;\n    let newHealth = this.state.userStats.health - healthLoss;\n    let theyLost = false;\n    let ended = false;\n    let isPlaying = !home;\n\n    if (newHealth <= 0) {\n      theyLost = true;\n      newHealth = 0;\n      ended = true;\n      isPlaying = false;\n      goHome = false;\n    }\n\n    if (this.state.lastStory && newHealth > 0) {\n      this.setState({\n        isHome: false,\n        ended: true,\n        isPlaying: false,\n        userStats: {\n          health: newHealth,\n          lost: false\n        }\n      });\n    } else {\n      let lastStory = false;\n      let newArr = this.state.storyLeft.slice(1);\n\n      if (newArr[0] === this.state.story[this.state.story.length - 1]) {\n        lastStory = true;\n      }\n\n      this.setState({\n        isHome: goHome,\n        ended: ended,\n        storyLeft: newArr,\n        isPlaying: isPlaying,\n        lastStory,\n        userStats: {\n          health: newHealth,\n          lost: theyLost\n        }\n      });\n    }\n  }\n\n  startGame() {\n    this.setState({\n      load: false,\n      isHome: true\n    });\n  }\n\n  render() {\n    if (this.state.isHome) {\n      return React.createElement(Main, {\n        popSetter: x => this.popSetter(x),\n        population: this.state.population,\n        health: this.state.userStats,\n        weather: this.state.weather,\n        story: this.state.story,\n        storyLeft: this.state.storyLeft,\n        change: () => this.change(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      });\n    } else if (this.state.isPlaying) {\n      return React.createElement(Display, {\n        lastStory: this.state.lastStory,\n        health: this.state.userStats,\n        story: this.state.storyLeft[0],\n        change: () => this.change(),\n        lose: (i, x) => this.lose(i, x),\n        nextStory: () => this.nextStory(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      });\n    } else if (this.state.ended) {\n      return React.createElement(EndScreen, {\n        weather: this.state.weather,\n        stats: this.state.userStats,\n        refresh: x => {\n          this.refresh(x);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(Loading, {\n        startGame: () => this.startGame(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default GameController;","map":{"version":3,"sources":["/mnt/c/Users/avmas/Desktop/dangerzone/client/src/controller/GameController.jsx"],"names":["React","Main","axios","Display","BinarySearchTree","iconPicker","Loading","EndScreen","GameController","Component","constructor","props","getCoordinates","position","keyWord","long","coords","longitude","lat","latitude","get","apiKey","then","results","setState","weather","data","getStoryLine","state","getLocation","navigator","geolocation","getCurrentPosition","isHome","isPlaying","load","ended","lastStory","story","storyLeft","userStats","health","lost","population","Math","floor","random","refresh","console","log","popSetter","newPopulation","formatData","arr","map","object","newTree","insertAll","scenario","intro","title","background","audio","sound","category","tree","res","storyLine","componentDidMount","change","lose","healthLoss","home","goHome","newHealth","theyLost","newArr","slice","length","startGame","render","x","i","nextStory"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Main from '../pages/main';\nimport axios from 'axios';\nimport Display from '../pages/display';\nimport BinarySearchTree from '../functions/binary';\nimport iconPicker from '../functions/iconPicker';\nimport Loading from '../pages/loading';\nimport EndScreen from '../components/EndScreen/EndScreen';\n\nclass GameController extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isHome: false,\n            isPlaying: false,\n            load: true,\n            ended: false,\n            lastStory: false,\n            story: [],\n            storyLeft: [],\n            userStats: {\n                health: 100,\n                lost: false\n            },\n            weather: [],\n            population: Math.floor(Math.random() * 2000000) + 250000\n        }\n        this.apiKey = '4774ad80334f760f9b45af484c39e9fe';\n    }\n\n    refresh(keyWord) {\n        console.log(keyWord)\n        if (!keyWord) {\n            this.getLocation();\n        } else {\n            \n        }\n        this.setState({\n            isHome: true,\n            isPlaying: false,\n            ended: false,\n            lastStory: false,\n            userStats: {\n                health: 100,\n                lost: true\n            }\n        })\n    }\n\n    popSetter(newPopulation) {\n        this.setState(\n            {\n                population: newPopulation\n            }\n        )\n    }\n\n\n    formatData(arr) {\n        return arr.map(object => {\n            let newTree = new BinarySearchTree()\n            newTree.insertAll(object.scenario)\n            return {\n                intro: object.intro,\n                title: object.title,\n                background: object.background,\n                audio: object.sound,\n                category: object.category,\n                tree: newTree\n            }\n        })\n    }\n\n    getCoordinates = (position, keyWord) => {\n        const long = position.coords.longitude;\n        const lat = position.coords.latitude;\n        axios.get('http://api.openweathermap.org/data/2.5/weather?lat='+lat+'&lon='+long+'&appid='+this.apiKey).then(results => {\n          this.setState({\n              weather: iconPicker(results.data, keyWord)\n          })\n          this.getStoryLine(this.state.weather[2])\n        })\n    }\n\n    getLocation = (keyWord) => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(() => this.getCoordinates(keyWord));\n        }\n    }\n\n    getStoryLine(category) {\n        axios.get('http://localhost:8080/story/'+category).then(res => {\n            let storyLine = this.formatData(res.data)\n            this.setState({\n                story: storyLine,\n                storyLeft: [...storyLine]\n            })\n        })\n    }\n\n    componentDidMount() {\n        this.getLocation();\n    }\n\n    change() {\n        this.setState({\n            isHome: !this.state.isHome,\n            isPlaying: !this.state.isPlaying\n        })\n    }\n\n    lose(healthLoss, home) {\n\n        let goHome = home;\n        let newHealth = this.state.userStats.health - healthLoss\n        let theyLost = false;\n        let ended = false;\n        let isPlaying = !home;\n        if (newHealth <= 0) {\n            theyLost = true;\n            newHealth = 0;\n            ended = true;\n            isPlaying = false\n            goHome = false\n        }\n        if (this.state.lastStory && newHealth > 0) {\n            this.setState({\n                isHome: false,\n                ended: true,\n                isPlaying: false,\n                userStats: {\n                    health: newHealth,\n                    lost: false\n                }\n            })\n        } else {\n           let lastStory = false;\n            let newArr = this.state.storyLeft.slice(1);\n            if (newArr[0] === this.state.story[this.state.story.length-1]) {\n                lastStory = true\n            }\n            this.setState({\n                isHome: goHome,\n                ended: ended,\n                storyLeft: newArr,\n                isPlaying: isPlaying,\n                lastStory,\n                userStats: {\n                    health: newHealth,\n                    lost: theyLost\n                }\n            }) \n        }\n    }\n\n    startGame() {\n        this.setState({\n            load: false,\n            isHome: true\n        })\n    }\n\n    render() {\n        if (this.state.isHome) {\n            return (\n                <Main popSetter={(x) => this.popSetter(x)} population={this.state.population} health={this.state.userStats} weather={this.state.weather} story={this.state.story} storyLeft={this.state.storyLeft} change={() => this.change()}/>\n            )\n        } else if (this.state.isPlaying) {\n            return <Display lastStory={this.state.lastStory} health={this.state.userStats} story={this.state.storyLeft[0]} change={() => this.change()} lose={(i,x) => this.lose(i,x)} nextStory={() => this.nextStory()}/>;\n        } else if (this.state.ended) {\n            return <EndScreen weather={this.state.weather} stats={this.state.userStats} refresh={(x) => {this.refresh(x)}}/>\n        }\n        else {\n            return <Loading startGame={() => this.startGame()}/>\n        }\n    }\n}\n\nexport default GameController;"]},"metadata":{},"sourceType":"module"}