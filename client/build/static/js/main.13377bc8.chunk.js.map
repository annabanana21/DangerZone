{"version":3,"sources":["assets/Icons/Earthquake.svg","assets/Icons/ColdWave.svg","assets/Icons/Hurricane.svg","assets/Icons/clipboard-clip.png","assets/Icons/Danger.svg","assets/Icons/checkmark.png","assets/lose.png","assets/win.png","components/Header/Header.jsx","components/News/News.jsx","components/ToggleButton/ToggleButton.jsx","components/StoryBoard/StoryBoard.jsx","components/Health/Health.jsx","pages/main.jsx","components/BackgroundVideo/BackgroundVideo.jsx","components/Complete/Complete.jsx","components/Slide/Slide.jsx","controller/SlideController.jsx","components/Intro/Intro.jsx","pages/display.jsx","functions/binary.js","functions/iconPicker.js","pages/loading.jsx","components/EndScreen/EndScreen.jsx","controller/GameController.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","News","state","population","props","interval","this","setState","setInterval","clearInterval","popSetter","x","toString","replace","weather","length","src","alt","skull","numberWithCommas","React","Component","ToggleButton","clip","onClick","display","StoryBoard","displayBoard","toggle","stopPropagation","event","amount","story","storyLeft","forEach","index","push","key","uuid","change","title","check","displayList","Health","style","width","health","Main","BackgroundVideo","background","backgroundImage","backgroundPosition","backgroundSize","children","Complete","completed","died","loss","setTimeout","lose","lastStory","Slide","leftOption","rightOption","left","right","nextHandler","SlideController","stage","finish","tree","root","prevProps","slide","nextStory","nextSlide","Intro","intro","showButton","startStory","Display","audio","Audio","load","loop","playAudio","pause","audioPromise","play","undefined","then","_","catch","err","console","info","BinarySearchTree","storyArray","insert","insertNode","node","newNode","value","iconPicker","weatherObj","wind","speed","tornado","Math","round","main","temp","id","cold","earth","Loading","startGame","EndScreen","showGames","games","filter","obj","type","game","refresh","earthquake","freeze","stats","lost","win","GameController","manualSet","keyWord","details","find","getCoordinates","position","long","coords","longitude","lat","latitude","axios","get","apiKey","results","data","getStoryLine","getLocation","navigator","geolocation","getCurrentPosition","isHome","isPlaying","ended","userStats","floor","random","log","newPopulation","arr","map","object","newTree","insertAll","scenario","sound","category","res","storyLine","formatData","healthLoss","home","goHome","newHealth","theyLost","newArr","slice","i","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.13377bc8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Earthquake.56851e29.svg\";","module.exports = __webpack_public_path__ + \"static/media/ColdWave.1bb3d552.svg\";","module.exports = __webpack_public_path__ + \"static/media/Hurricane.35375e9f.svg\";","module.exports = __webpack_public_path__ + \"static/media/clipboard-clip.699d568f.png\";","module.exports = __webpack_public_path__ + \"static/media/Danger.b5037a66.svg\";","module.exports = __webpack_public_path__ + \"static/media/checkmark.f3853eaf.png\";","module.exports = __webpack_public_path__ + \"static/media/lose.e7379e4c.png\";","module.exports = __webpack_public_path__ + \"static/media/win.9670af2e.png\";","import React from 'react';\nimport './Header.scss';\n\nfunction Header() {\n    return (\n        <header className='bar'>\n            <div className='bar__box'>\n                <h1 className='bar__title'><span className='bar__slant'>ZONE DANGER ZONE </span>DANGER ZONE <span className='bar__slant'>DANGER ZONE DANGER</span></h1>\n            </div>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport './News.scss';\nimport skull from '../../assets/Icons/Danger.svg';\n\n\nclass News extends React.Component {\n\n    state = {\n        population: this.props.population,\n        interval: ''\n    }\n\n    componentDidMount() {\n        //Increases the death count every 3 seconds\n        this.setState({\n            population: this.props.population,\n            interval: setInterval(() => {\n                this.setState({\n                    population: this.state.population + 1\n                })\n            }, 3000)\n        })\n    }\n\n    componentWillUnmount() {\n        //Clears the death counter and passes back new value to game controller\n        clearInterval(this.state.interval)\n        this.props.popSetter(this.state.population)\n    }\n\n    numberWithCommas(x) {\n        //Converts a number to a string with commas in the appropriate place\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    render() {\n        if (!this.props.weather.length > 0) {\n            return null;\n        } else {\n            return (\n                <div className='news'>\n                    <div className='news__box'>\n                        <img src={this.props.weather[1]} className='news__icon' alt='Weather warning icon'/>\n                        <div className='news__font'>\n                            <h3 className='news__weather flash'>{this.props.weather[0]}</h3>\n                        </div>\n                    </div>\n                    <div className='news__wrap'>\n                        <div className='news__box--small'>\n                            <img src={skull} className='news__icon--small' alt='Skull and crossbones icon'/>\n                            <h4 className='news__num'>{this.numberWithCommas(this.state.population)}</h4>\n                        </div>\n                        <div className='news__box--small'>\n                            <h4 className='news__temp'>{this.props.weather[3]}°C</h4>\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n\nexport default News;","import React from 'react';\nimport clip from '../../assets/Icons/clipboard-clip.png';\nimport './ToggleButton.scss';\n\nfunction ToggleButton(props) {\n    return (\n        <div>\n            <img src={clip} className='button__task' onClick={props.display} alt='Cartoon clipboard'/>\n            <div className='button__alert getBig'>!</div>\n        </div>\n    )\n}\n\nexport default ToggleButton;","import React from 'react';\nimport ToggleButton from '../ToggleButton/ToggleButton';\nimport './StoryBoard.scss';\nimport clip from '../../assets/Icons/clipboard-clip.png';\nimport check from '../../assets/Icons/checkmark.png';\nimport uuid from 'uuid-random';\n\n\nexport default class StoryBoard extends React.Component {\n\n    state ={\n        displayBoard: false\n    }\n\n    toggle = () => {\n        this.setState({\n            displayBoard: !this.state.displayBoard\n        })\n    }\n\n    stopPropagation = event => {\n        //Clipboard won't close when pressed\n        event.stopPropagation();\n    }\n\n    displayList() {\n        const amount = this.props.story.length - this.props.storyLeft.length;\n        let display = [];\n        this.props.story.forEach((story, index) => {\n            if (index === amount) {\n                display.push(<div className='story__row' key={uuid()}><div className='story__check'></div><h3 className='story__stage--current' onClick={this.props.change}>{story.title}</h3></div>)\n            } else if (index > amount) {\n                display.push(<div className='story__row' key={uuid()}><div className='story__check'></div><h3 className='story__stage--blur'>{story.title}</h3></div>)\n            } else {\n                display.push(<div className='story__row' key={uuid()}><div className='story__check'><img src={check} className='story__mark' alt='Green check mark'/></div><h3 className='story__stage'>{story.title}</h3></div>)\n            }\n        })\n        return display;\n    }\n\n\n    render() {\n        return (\n            <div>\n                {\n                    this.state.displayBoard &&\n                    <div className='story' onClick={this.toggle}>\n                    <div className='story__wrap' onClick={this.stopPropagation}>\n                        <img src={clip} className='story__board' alt='Cartoon clipboard'/>\n                        <div className='story__write'>\n                            <h3 className='story__title'>CHECKLIST</h3>\n                            {this.displayList()}\n                        </div>\n                    </div>\n                    </div>\n                }\n                { !this.state.displayBoard &&\n                <ToggleButton display={() => this.toggle()}/>}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './Health.scss';\n\nfunction Health(props) {\n    return (\n        <div className='health__box'>\n            <h4 className='health__title'>HEALTH</h4>\n            <div className='health'>\n                <div className='health__bar' style={{width: `${props.health}%`}}></div>\n            </div>\n        </div>\n    )\n}\n\nexport default Health;","import React from 'react';\nimport './main.scss';\nimport News from '../components/News/News';\nimport StoryBoard from '../components/StoryBoard/StoryBoard';\nimport Health from '../components/Health/Health';\n\nclass Main extends React.Component {\n\n    render() {\n        return (\n            <main className='page'>\n                <News popSetter={this.props.popSetter} weather={this.props.weather} population={this.props.population}/>\n                <StoryBoard story={this.props.story} storyLeft={this.props.storyLeft} change={this.props.change}/>\n                <div className='page__health'><Health health={this.props.health.health}/></div>\n            </main>\n        )\n    }\n}\n\nexport default Main;","import React from 'react';\nimport './BackgroundVideo.scss';\n\nconst BackgroundVideo = (props) => {\n    if (!props.story.background) {\n        return null\n    } else {\n        return (\n            <div style={{backgroundImage: `url(${'http://localhost:8080/public/videos/'+props.story.background})`, backgroundPosition: 'center', backgroundSize: 'cover'}} className='video'>\n                {props.children}\n            </div>\n        )\n    }\n}\n\nexport default BackgroundVideo;","import React from 'react';\nimport './Complete.scss';\nimport Health from '../Health/Health';\n\nclass Complete extends React.Component {\n\n    state = {\n        completed: false,\n        died: false,\n        health: this.props.health.health,\n        interval: ''\n    }\n\n    componentDidMount() {\n        //If user loses any health at all start interval to show health going down\n        if (this.props.story.loss > 0) {\n            this.setState({\n                interval: setInterval(() => {\n                    this.setState({\n                        health: this.state.health - 1\n                    })\n                }, 20)\n            })\n        }\n\n        //If health dips below 0 hide home and next button and prepare for losing screen\n        if (this.props.health.health - this.props.story.loss*100 <= 0) {\n            this.setState({\n                died: true\n            })\n            setTimeout(() => {\n                this.props.lose(this.props.story.loss*100, true);\n            }, 6000)\n        //User encounters the last scenario in the story prepare for winning screen\n        } else if (this.props.lastStory) {\n            this.setState({\n                completed: true\n            })\n            setTimeout(() => {\n                this.props.lose(this.props.story.loss*100, true);\n            }, 6000)\n        }\n    }\n\n    componentDidUpdate() {\n        //Stop showing health decrease when the health meter has shown the complete percent lost\n        if (this.state.interval !== '' && (this.state.health === this.props.health.health - this.props.story.loss*100 || this.state.health === 0)) {\n            clearInterval(this.state.interval)\n        }\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.state.interval);\n    }\n\n    render() {\n        return (\n            <div className='complete'>\n                <div className='complete__prompt'>{this.props.story.story}</div>\n                <Health health={this.state.health}/>\n                {!this.state.died && !this.state.completed && <div className='complete__wrap'>\n                    <div className='complete__button' onClick={() => this.props.lose(this.props.story.loss*100, true)}>Home</div>\n                    <div className='complete__button' onClick={() => this.props.lose(this.props.story.loss*100, false)}>Next</div>\n                </div>}\n            </div>\n        )\n    }\n}\n\nexport default Complete;","import React from 'react';\nimport './Slide.scss';\n\nconst Slide = (props) => {\n    if (props.story) {\n        const {story, leftOption, rightOption, left, right} = props.story;\n    \n        return (\n            <div className='slide'>\n                <div className='slide__q'>\n                    {story}\n                </div>\n                <div className='slide__wrap'>\n                    <div className='slide__box' onClick={() => props.nextHandler(left)}>{leftOption}</div>\n                    <div className='slide__box' onClick={() => props.nextHandler(right)}>{rightOption}</div>\n                </div>\n            </div>\n        )\n    } else {\n        return null\n    }\n}\n\nexport default Slide;","import React from 'react';\nimport Complete from '../components/Complete/Complete';\nimport Slide from '../components/Slide/Slide';\n\nclass SlideController extends React.Component {\n\n    state = {\n        stage: '',\n        finish: false\n    }\n\n    componentDidMount() {\n        this.setState({\n            stage: this.props.story.tree.root\n        })\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.story !== this.props.story) {\n            this.setState({\n                stage: this.props.story.tree.root,\n                finish: false\n            })\n        }\n    }\n\n    nextSlide(slide) {\n        if (slide.right || slide.left) {\n            this.setState(\n                {\n                    stage: slide\n                }\n            )\n        } else {\n            this.setState(\n                {\n                    finish: true,\n                    stage: slide\n                }\n            )\n        }\n    }\n\n    render() {\n        if (!this.state.finish) {\n            return <Slide story={this.state.stage} nextHandler={(slide) => this.nextSlide(slide)}/>\n        } else {\n            return <Complete lastStory={this.props.lastStory} health={this.props.health} story={this.state.stage} change={this.props.change} lose={this.props.lose} nextStory={this.props.nextStory}/>\n        } \n    }\n}\n\nexport default SlideController;","import React from 'react';\nimport './Intro.scss';\n\nconst Intro = (props) => {\n\n    return (\n        <div className='intro'>\n            <h2 className='intro__story'>{props.intro}</h2>\n            {\n                props.showButton && <h3 className='intro__button fade-in' onClick={props.startStory}>NEXT</h3>\n            }\n        </div>\n    )\n}\n\nexport default Intro;","import React from 'react';\nimport './display.scss';\nimport BackgroundVideo from '../components/BackgroundVideo/BackgroundVideo';\nimport SlideController from '../controller/SlideController';\nimport Intro from '../components/Intro/Intro';\n\nclass Display extends React.Component {\n\n    state={\n        intro: true,\n        showButton: false\n    }\n\n    componentDidMount() {\n        this.audio = new Audio('http://localhost:8080/public/audio/'+this.props.story.audio);\n        this.audio.load();\n        this.audio.loop = true;\n        this.playAudio();\n\n        setTimeout(() => {\n            this.setState({\n                showButton: true\n            })\n        }, 6000)\n    }\n\n    componentWillUnmount() {\n        this.audio.pause();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.story !== this.props.story) {\n            this.audio.pause();\n            this.audio = new Audio('http://localhost:8080/public/audio/'+this.props.story.audio);\n            this.audio.load();\n            this.audio.loop = true;\n            this.playAudio();\n\n            this.setState({\n                intro: true,\n                showButton: false\n            })\n\n            setTimeout(() => {\n                this.setState({\n                    showButton: true\n                })\n            }, 4000)\n        }\n    }\n\n    playAudio() {\n        const audioPromise = this.audio.play()\n        if (audioPromise !== undefined) {\n          audioPromise\n            .then(_ => {\n              // autoplay started\n            })\n            .catch(err => {\n              // catch dom exception\n              console.info(err)\n            })\n        }\n    }\n\n    startStory() {\n        this.setState({\n            intro: false\n        })\n    }\n\n    render() {\n        if (this.state.intro) {\n            return <Intro showButton={this.state.showButton} intro={this.props.story.intro} startStory={() => this.startStory()}/>\n        } else {\n            return <BackgroundVideo story={this.props.story}><SlideController lastStory={this.props.lastStory} health={this.props.health} lose={this.props.lose} story={this.props.story} change={this.props.change} nextStory={this.props.nextStory}/></BackgroundVideo>  \n        }\n    }\n}\n\nexport default Display;","class BinarySearchTree \n{ \n    constructor() { \n        // root of a binary seach tree \n        this.root = null; \n    } \n\n    insertAll(storyArray){\n        storyArray.forEach(story => {\n            this.insert(story);\n        })\n    }\n\n    // helper method which creates a new node to  \n    // be inserted and calls insertNode \n    insert(story) \n    {  \n                \n        // root is null then node will become root\n        if(this.root === null) \n            this.root = story; \n        else\n            // finds the appropriate position\n            this.insertNode(this.root, story); \n    } \n  \n    // Method to insert a node in a tree  \n    insertNode(node, newNode) \n    { \n        // if the data is less than the node \n        // data move left of the tree  \n        if (newNode.value < node.value) \n        { \n            // if left is null insert node here \n            if (node.left === null) \n                node.left = newNode; \n            else\n    \n                // if left is not null recurr until  \n                // null is found \n                this.insertNode(node.left, newNode);  \n        } \n    \n        // if the data is more than the node \n        // data move right of the tree  \n        else\n        { \n            // if right is null insert node here \n            if(node.right === null) \n                node.right = newNode; \n            else\n    \n                // if right is not null recurr until  \n                // null is found \n                this.insertNode(node.right,newNode); \n        } \n    } \n  \n} \n\nexport default BinarySearchTree;","import earth from '../assets/Icons/Earthquake.svg';\nimport cold from '../assets/Icons/ColdWave.svg';\nimport tornado from '../assets/Icons/Hurricane.svg';\n\n\nconst iconPicker = (weatherObj) => {\n    if (weatherObj.wind.speed > 8) {\n        return ['TORNADO WARNING', tornado, 'wind', Math.round(weatherObj.main.temp - 273.15)];\n    }\n    else if ((weatherObj.weather[0].id >=600 && weatherObj.weather[0].id < 623) || weatherObj.main.temp < 273.15) {\n        return ['DEEP FREEZE', cold, 'freeze', Math.round(weatherObj.main.temp - 273.15 - 40)];\n    } \n    else {\n        return ['EARTHQUAKE WARNING', earth, 'earth', Math.round(weatherObj.main.temp - 273.15)];\n    }\n}\n\nexport default iconPicker;","import React from 'react';\nimport './loading.scss';\n\nclass Loading extends React.Component {\n    componentDidMount() {\n        setTimeout(() => {\n            this.props.startGame()\n        }, 4000)\n\n    }\n\n    render() {\n        return (\n            <div className='load'>\n                <div className='load__container'>\n                    <h2 className='load__title'>LOADING</h2>\n                    <div className='load__visual'>\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Loading;","import React from 'react';\nimport './EndScreen.scss';\nimport lose from '../../assets/lose.png';\nimport win from '../../assets/win.png';\nimport earthquake from '../../assets/Icons/Earthquake.svg';\nimport freeze from '../../assets/Icons/ColdWave.svg';\nimport tornado from '../../assets/Icons/Hurricane.svg';\n\nclass EndScreen extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            health: 0,\n            interval: ''\n        }\n        this.games = [{type: ['earth', earthquake]}, {type: ['freeze', freeze]}, {type: ['wind', tornado]}]\n    }\n\n    componentDidMount() {\n        //If the user hasn't lost start counter to show user's end of game health\n        if (!this.props.stats.lost) {\n            this.setState({\n                interval: setInterval(() => {\n                    this.setState({\n                        health: this.state.health + 1\n                    })\n                }, 20)\n            })\n        }\n    }\n\n    componentDidUpdate() {\n        //Clear the health interval when the user's total health is displayed\n        if (this.props.stats.health === this.state.health) {\n            clearInterval(this.state.interval)\n        }\n    }\n\n    showGames = () => {\n        let display = [];\n        let newList = this.games.filter(obj => obj.type[0] !== this.props.weather[2])\n        newList.forEach(game => {\n            display.push(<img src={game.type[1]} className='end__icon' onClick={() => this.props.refresh(game.type[0])} alt='disaster icon'/>)\n        })\n        return display;\n    }\n\n    render() {\n        return (\n            <div className='end'>\n                {\n                    this.props.stats.lost && (\n                        <>\n                            <img src={lose} className='end__image' alt='Skull with missing front teeth'/>\n                            <h2 className='end__title'>YOU LOSE</h2>\n                        </>\n                        )\n                }\n                {\n                    !this.props.stats.lost && (\n                        <>\n                        <div className='end__icon-box'>\n                        <h3 className='end__small'>TRY THE OTHER GAMES!</h3>\n                        {\n                            this.showGames()\n                        }\n                        </div>\n                        <img src={win} className='end__image' alt='Skull with old school pilot hat on'/>\n                        <h2 className='end__title'>YOU WIN</h2>\n                        <h3 className='end__percent'>{this.state.health}% HEALTH REMAINING</h3>\n                        </>\n                        )\n                }\n                <div className='end__button' onClick={() => this.props.refresh(null)}>PLAY AGAIN</div>\n            </div>\n        )\n    }\n}\n\nexport default EndScreen;","import React from 'react';\nimport Main from '../pages/main';\nimport axios from 'axios';\nimport Display from '../pages/display';\nimport BinarySearchTree from '../functions/binary';\nimport iconPicker from '../functions/iconPicker';\nimport Loading from '../pages/loading';\nimport EndScreen from '../components/EndScreen/EndScreen';\nimport earth from '../assets/Icons/Earthquake.svg';\nimport cold from '../assets/Icons/ColdWave.svg';\nimport tornado from '../assets/Icons/Hurricane.svg';\n\nclass GameController extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isHome: false,\n            isPlaying: false,\n            load: true,\n            ended: false,\n            lastStory: false,\n            story: [],\n            storyLeft: [],\n            userStats: {\n                health: 100,\n                lost: false\n            },\n            weather: [],\n            population: Math.floor(Math.random() * 2000000) + 250000\n        }\n        this.apiKey = '4774ad80334f760f9b45af484c39e9fe';\n        this.games = [['TORNADO WARNING', tornado, 'wind'], ['DEEP FREEZE', cold, 'freeze'], ['EARTHQUAKE WARNING', earth, 'earth']]\n    }\n\n    refresh(keyWord) {\n        console.log(keyWord)\n        if (!keyWord) {\n            this.getLocation();\n        } else {\n            this.manualSet(keyWord);\n            this.getStoryLine(keyWord);\n        }\n        this.setState({\n            isHome: true,\n            isPlaying: false,\n            ended: false,\n            lastStory: false,\n            userStats: {\n                health: 100,\n                lost: false\n            }\n        })\n    }\n\n    manualSet = (keyWord) => {\n        let details = this.games.find(game => game[2] === keyWord);\n        let weather = this.state.weather[3]\n        if (weather < -20 && details[0] !== 'DEEP FREEZE') {\n            weather = weather + 40;\n        } else if (weather > -40 && details[0] === 'DEEP FREEZE') {\n            weather = weather-40;\n        }\n        this.setState({\n            weather: [...details, weather]\n        })\n    }\n\n    popSetter(newPopulation) {\n        this.setState(\n            {\n                population: newPopulation\n            }\n        )\n    }\n\n\n    formatData(arr) {\n        return arr.map(object => {\n            let newTree = new BinarySearchTree()\n            newTree.insertAll(object.scenario)\n            return {\n                intro: object.intro,\n                title: object.title,\n                background: object.background,\n                audio: object.sound,\n                category: object.category,\n                tree: newTree\n            }\n        })\n    }\n\n    getCoordinates = (position) => {\n        const long = position.coords.longitude;\n        const lat = position.coords.latitude;\n        axios.get('http://api.openweathermap.org/data/2.5/weather?lat='+lat+'&lon='+long+'&appid='+this.apiKey).then(results => {\n          this.setState({\n              weather: iconPicker(results.data)\n          })\n          this.getStoryLine(this.state.weather[2])\n        })\n    }\n\n    getLocation = () => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this.getCoordinates);\n        }\n    }\n\n    getStoryLine(category) {\n        axios.get('http://localhost:8080/story/'+category).then(res => {\n            let storyLine = this.formatData(res.data)\n            this.setState({\n                story: storyLine,\n                storyLeft: [...storyLine]\n            })\n        })\n    }\n\n    componentDidMount() {\n        this.getLocation();\n    }\n\n    change() {\n        this.setState({\n            isHome: !this.state.isHome,\n            isPlaying: !this.state.isPlaying\n        })\n    }\n\n    lose(healthLoss, home) {\n\n        let goHome = home;\n        let newHealth = this.state.userStats.health - healthLoss\n        let theyLost = false;\n        let ended = false;\n        let isPlaying = !home;\n        if (newHealth <= 0) {\n            theyLost = true;\n            newHealth = 0;\n            ended = true;\n            isPlaying = false\n            goHome = false\n        }\n        if (this.state.lastStory && newHealth > 0) {\n            this.setState({\n                isHome: false,\n                ended: true,\n                isPlaying: false,\n                userStats: {\n                    health: newHealth,\n                    lost: false\n                }\n            })\n        } else {\n           let lastStory = false;\n            let newArr = this.state.storyLeft.slice(1);\n            if (newArr[0] === this.state.story[this.state.story.length-1]) {\n                lastStory = true\n            }\n            this.setState({\n                isHome: goHome,\n                ended: ended,\n                storyLeft: newArr,\n                isPlaying: isPlaying,\n                lastStory,\n                userStats: {\n                    health: newHealth,\n                    lost: theyLost\n                }\n            }) \n        }\n    }\n\n    startGame() {\n        this.setState({\n            load: false,\n            isHome: true\n        })\n    }\n\n    render() {\n        if (this.state.isHome) {\n            return (\n                <Main popSetter={(x) => this.popSetter(x)} population={this.state.population} health={this.state.userStats} weather={this.state.weather} story={this.state.story} storyLeft={this.state.storyLeft} change={() => this.change()}/>\n            )\n        } else if (this.state.isPlaying) {\n            return <Display lastStory={this.state.lastStory} health={this.state.userStats} story={this.state.storyLeft[0]} change={() => this.change()} lose={(i,x) => this.lose(i,x)} nextStory={() => this.nextStory()}/>;\n        } else if (this.state.ended) {\n            return <EndScreen weather={this.state.weather} stats={this.state.userStats} refresh={(x) => {this.refresh(x)}}/>\n        }\n        else {\n            return <Loading startGame={() => this.startGame()}/>\n        }\n    }\n}\n\nexport default GameController;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport GameController from './controller/GameController';\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <GameController />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}